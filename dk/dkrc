#!/bin/sh

# example dkrc to show some basic command usage and error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"


# (re)load sxhkd for keybinds
if hash sxhkd >/dev/null 2>&1; then
	pkill sxhkd
	sxhkd -c "$HOME/.config/dk/sxhkdrc" &
fi

{ # compound command to redirect all output


	# workspace settings
	# ------------------------

	# initialize 10 workspaces (1-10) (default: 1/monitor)
	dkcmd set numws=10

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=3 gap=5 msplit=0.5 ssplit=0.5

	# use grid layout, padding, and gaps on workspace 10
	dkcmd set ws=10 layout=grid pad left=50 right=50 top=50 bottom=50 gap width=50

	# change workspace names (default: number == name)
	dkcmd set \
		ws=1  name="🌐" \
		ws=2  name="👾" \
		ws=3  name="😀" \
		ws=4  name="😠" \
		ws=5  name="5" \
		ws=6  name="6" \
		ws=7  name="7" \
		ws=8  name="8" \
		ws=9  name="9" \
		ws=10 name="🎧"


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=true smart_border=true

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=alt move=button1 resize=button3


	# borders
	# ---------

	# enable split borders and colours, width is overall width, outer width consumes some of width.
	# outer width must be less than width, outer width of 0 will be single borders
	dkcmd set border width=5 outer_width=3 \
		colour \
		focus='#6699cc' \
		unfocus='#444444' \
		urgent='#ee5555' \
		outer_focus='#222222' \
		outer_unfocus='#222222' \
		outer_urgent='#222222'


	# window rules
	# --------------

	# rule class, instance, and title regexes (*ALWAYS* CASE INSENSITIVE)

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|transmission-gtk|steam|lxappearance)$" float=true

	# open window(s) with sticky and floating enabled to view on all workspaces.
	dkcmd rule class="^stickyterm$" stick=true float=true

	# focus window and workspace on opening
	dkcmd rule class="^firefox$" ws=1

	# apply current rule set to all existing windows
	dkcmd rule apply '*'

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

# start other essential things for the "desktop" experience

# set eurkey keymap
setxkbmap eu

# start compositor
picom -b

# hide cursor
unclutter & disown

# reload theme
wal -R

# load colors
update-colors.sh

# set screen layout
autorandr --change

# start status bar
polybar main > /tmp/polybar-main.log 2>&1 & disown
polybar full > /tmp/polybar-full.log 2>&1 & disown

main="$(pgrep -nf "polybar main")"
full="$(pgrep -nf "polybar full")"

# setup wm output
dkcmd status type=full file=/tmp/dk_status

# start dk status monitor
direvent -f $XDG_CONFIG_HOME/direvent/direvent.conf & disown

exit 0
